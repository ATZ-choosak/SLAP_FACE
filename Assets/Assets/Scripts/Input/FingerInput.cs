//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Assets/Scripts/Input/FingerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FingerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FingerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FingerInput"",
    ""maps"": [
        {
            ""name"": ""Finger"",
            ""id"": ""66485fc8-4a4b-482a-b4e3-3a377735ed3c"",
            ""actions"": [
                {
                    ""name"": ""Z"",
                    ""type"": ""Button"",
                    ""id"": ""0242c64d-16df-4665-9033-ff556bbc8af2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""7fbec243-7905-4b11-9b05-3f9189ecee6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C"",
                    ""type"": ""Button"",
                    ""id"": ""df2af35b-188c-415c-9e12-2fafa9508c2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""V"",
                    ""type"": ""Button"",
                    ""id"": ""a72eb4ea-f5c2-4b93-bde9-16ce87785074"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""6db99732-4837-49d5-bb04-5d59771736f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae5872ec-2f91-41bb-a784-cdf898417fe0"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""244ac1e9-0eee-449e-bc36-b0055940ce34"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2f63f66-cd58-4d40-98a1-29fbb3b3b89b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1c54e41-4dfe-48cf-a993-5f92356f8f69"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""V"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9741064d-4f9c-4430-965e-35c6b2ddc026"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Finger
        m_Finger = asset.FindActionMap("Finger", throwIfNotFound: true);
        m_Finger_Z = m_Finger.FindAction("Z", throwIfNotFound: true);
        m_Finger_X = m_Finger.FindAction("X", throwIfNotFound: true);
        m_Finger_C = m_Finger.FindAction("C", throwIfNotFound: true);
        m_Finger_V = m_Finger.FindAction("V", throwIfNotFound: true);
        m_Finger_B = m_Finger.FindAction("B", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Finger
    private readonly InputActionMap m_Finger;
    private List<IFingerActions> m_FingerActionsCallbackInterfaces = new List<IFingerActions>();
    private readonly InputAction m_Finger_Z;
    private readonly InputAction m_Finger_X;
    private readonly InputAction m_Finger_C;
    private readonly InputAction m_Finger_V;
    private readonly InputAction m_Finger_B;
    public struct FingerActions
    {
        private @FingerInput m_Wrapper;
        public FingerActions(@FingerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Z => m_Wrapper.m_Finger_Z;
        public InputAction @X => m_Wrapper.m_Finger_X;
        public InputAction @C => m_Wrapper.m_Finger_C;
        public InputAction @V => m_Wrapper.m_Finger_V;
        public InputAction @B => m_Wrapper.m_Finger_B;
        public InputActionMap Get() { return m_Wrapper.m_Finger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FingerActions set) { return set.Get(); }
        public void AddCallbacks(IFingerActions instance)
        {
            if (instance == null || m_Wrapper.m_FingerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FingerActionsCallbackInterfaces.Add(instance);
            @Z.started += instance.OnZ;
            @Z.performed += instance.OnZ;
            @Z.canceled += instance.OnZ;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @C.started += instance.OnC;
            @C.performed += instance.OnC;
            @C.canceled += instance.OnC;
            @V.started += instance.OnV;
            @V.performed += instance.OnV;
            @V.canceled += instance.OnV;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
        }

        private void UnregisterCallbacks(IFingerActions instance)
        {
            @Z.started -= instance.OnZ;
            @Z.performed -= instance.OnZ;
            @Z.canceled -= instance.OnZ;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @C.started -= instance.OnC;
            @C.performed -= instance.OnC;
            @C.canceled -= instance.OnC;
            @V.started -= instance.OnV;
            @V.performed -= instance.OnV;
            @V.canceled -= instance.OnV;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
        }

        public void RemoveCallbacks(IFingerActions instance)
        {
            if (m_Wrapper.m_FingerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFingerActions instance)
        {
            foreach (var item in m_Wrapper.m_FingerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FingerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FingerActions @Finger => new FingerActions(this);
    public interface IFingerActions
    {
        void OnZ(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnC(InputAction.CallbackContext context);
        void OnV(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
    }
}
